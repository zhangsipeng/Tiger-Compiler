// Generated by Bisonc++ V6.01.00 on Thu, 23 Dec 2021 05:07:44 +0000

// base/comment

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved__::UNDETERMINED__, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok__
// which is applied. In this errTok__ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved__
    {
        UNDETERMINED__   = -2,
        EOF__            = -1,
        errTok__         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    enum StateTransition
    {
        ACCEPT__   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION__ = 10
    };

// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {325, 1}, // 1: program ->  exp
     {326, 1}, // 2: lvalue (ID) ->  ID
     {326, 3}, // 3: lvalue (DOT) ->  lvalue DOT ID
     {326, 4}, // 4: lvalue (LBRACK) ->  lvalue LBRACK exp RBRACK
     {326, 4}, // 5: lvalue (ID) ->  ID LBRACK exp RBRACK
     {327, 1}, // 6: exp ->  lvalue
     {327, 1}, // 7: exp (NIL) ->  NIL
     {327, 3}, // 8: exp (LPAREN) ->  LPAREN sequencing RPAREN
     {327, 3}, // 9: exp (LPAREN) ->  LPAREN exp RPAREN
     {327, 1}, // 10: exp (INT) ->  INT
     {327, 1}, // 11: exp (STRING) ->  STRING
     {327, 2}, // 12: exp (UMINUS) ->  MINUS exp
     {327, 4}, // 13: exp (ID) ->  ID LPAREN actuals RPAREN
     {327, 3}, // 14: exp (PLUS) ->  exp PLUS exp
     {327, 3}, // 15: exp (MINUS) ->  exp MINUS exp
     {327, 3}, // 16: exp (TIMES) ->  exp TIMES exp
     {327, 3}, // 17: exp (DIVIDE) ->  exp DIVIDE exp
     {327, 3}, // 18: exp (EQ) ->  exp EQ exp
     {327, 3}, // 19: exp (NEQ) ->  exp NEQ exp
     {327, 3}, // 20: exp (LT) ->  exp LT exp
     {327, 3}, // 21: exp (LE) ->  exp LE exp
     {327, 3}, // 22: exp (GT) ->  exp GT exp
     {327, 3}, // 23: exp (GE) ->  exp GE exp
     {327, 3}, // 24: exp (AND) ->  exp AND exp
     {327, 3}, // 25: exp (OR) ->  exp OR exp
     {327, 4}, // 26: exp (ID) ->  ID LBRACE rec RBRACE
     {327, 6}, // 27: exp (ID) ->  ID LBRACK exp RBRACK OF exp
     {327, 3}, // 28: exp (ASSIGN) ->  lvalue ASSIGN exp
     {327, 6}, // 29: exp (IF) ->  IF exp THEN exp ELSE exp
     {327, 4}, // 30: exp (IF) ->  IF exp THEN exp
     {327, 4}, // 31: exp (WHILE) ->  WHILE exp DO exp
     {327, 8}, // 32: exp (FOR) ->  FOR ID ASSIGN exp TO exp DO exp
     {327, 1}, // 33: exp (BREAK) ->  BREAK
     {327, 5}, // 34: exp (LET) ->  LET decs IN expseq END
     {328, 1}, // 35: expseq ->  sequencing
     {329, 0}, // 36: sequencing ->  <empty>
     {329, 1}, // 37: sequencing ->  exp
     {329, 1}, // 38: sequencing ->  sequencing_exps
     {330, 3}, // 39: sequencing_exps (SEMICOLON) ->  exp SEMICOLON exp
     {330, 3}, // 40: sequencing_exps (SEMICOLON) ->  exp SEMICOLON sequencing_exps
     {331, 0}, // 41: actuals ->  <empty>
     {331, 1}, // 42: actuals ->  nonemptyactuals
     {332, 1}, // 43: nonemptyactuals ->  exp
     {332, 3}, // 44: nonemptyactuals (COMMA) ->  exp COMMA nonemptyactuals
     {333, 0}, // 45: rec ->  <empty>
     {333, 1}, // 46: rec ->  rec_nonempty
     {334, 1}, // 47: rec_nonempty ->  rec_one
     {334, 3}, // 48: rec_nonempty (COMMA) ->  rec_one COMMA rec_nonempty
     {335, 3}, // 49: rec_one (ID) ->  ID EQ exp
     {336, 0}, // 50: decs ->  <empty>
     {336, 1}, // 51: decs ->  decs_nonempty
     {337, 1}, // 52: decs_nonempty ->  decs_nonempty_s
     {337, 2}, // 53: decs_nonempty ->  decs_nonempty_s decs_nonempty
     {338, 1}, // 54: decs_nonempty_s ->  tydec
     {338, 1}, // 55: decs_nonempty_s ->  vardec
     {338, 1}, // 56: decs_nonempty_s ->  fundec
     {339, 1}, // 57: tydec ->  tydec_one
     {339, 2}, // 58: tydec ->  tydec_one tydec
     {340, 4}, // 59: tydec_one (TYPE) ->  TYPE ID EQ ty
     {341, 1}, // 60: ty (ID) ->  ID
     {341, 3}, // 61: ty (LBRACE) ->  LBRACE tyfields RBRACE
     {341, 3}, // 62: ty (ARRAY) ->  ARRAY OF ID
     {342, 0}, // 63: tyfields ->  <empty>
     {342, 1}, // 64: tyfields ->  tyfields_nonempty
     {343, 3}, // 65: tyfields_nonempty (ID) ->  ID COLON ID
     {343, 5}, // 66: tyfields_nonempty (ID) ->  ID COLON ID COMMA tyfields_nonempty
     {344, 4}, // 67: vardec (VAR) ->  VAR ID ASSIGN exp
     {344, 6}, // 68: vardec (VAR) ->  VAR ID COLON ID ASSIGN exp
     {345, 1}, // 69: fundec ->  fundec_one
     {345, 2}, // 70: fundec ->  fundec_one fundec
     {346, 7}, // 71: fundec_one (FUNCTION) ->  FUNCTION ID LPAREN tyfields RPAREN EQ exp
     {346, 9}, // 72: fundec_one (FUNCTION) ->  FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
     {347, 1}, // 73: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 15} },           
    { {       325}, {  1} }, // program
    { {       327}, {  2} }, // exp    
    { {       326}, {  3} }, // lvalue 
    { {       283}, {  4} }, // NIL    
    { {       263}, {  5} }, // LPAREN 
    { {       259}, {  6} }, // INT    
    { {       258}, {  7} }, // STRING 
    { {       321}, {  8} }, // MINUS  
    { {       257}, {  9} }, // ID     
    { {       271}, { 10} }, // IF     
    { {       274}, { 11} }, // WHILE  
    { {       275}, { 12} }, // FOR    
    { {       282}, { 13} }, // BREAK  
    { {       278}, { 14} }, // LET    
    { {         0}, {  0} },           
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {        2} }, 
    { {     EOF__}, { ACCEPT__} }, 
    { {         0}, {        0} }, 
};

SR__ s_2[] =
{
    { { REQ_DEF}, { 13} },          
    { {     320}, { 15} }, // PLUS  
    { {     321}, { 16} }, // MINUS 
    { {     322}, { 17} }, // TIMES 
    { {     323}, { 18} }, // DIVIDE
    { {     314}, { 19} }, // EQ    
    { {     315}, { 20} }, // NEQ   
    { {     316}, { 21} }, // LT    
    { {     317}, { 22} }, // LE    
    { {     318}, { 23} }, // GT    
    { {     319}, { 24} }, // GE    
    { {     313}, { 25} }, // AND   
    { {     312}, { 26} }, // OR    
    { {       0}, { -1} },          
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  4} },          
    { {     311}, { 27} }, // ASSIGN
    { {     269}, { 28} }, // DOT   
    { {     265}, { 29} }, // LBRACK
    { {       0}, { -6} },          
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_5[] =
{
    { { REQ_DEF}, {  16} },                   
    { {     329}, {  30} }, // sequencing     
    { {     327}, {  31} }, // exp            
    { {     330}, {  32} }, // sequencing_exps
    { {     326}, {   3} }, // lvalue         
    { {     283}, {   4} }, // NIL            
    { {     263}, {   5} }, // LPAREN         
    { {     259}, {   6} }, // INT            
    { {     258}, {   7} }, // STRING         
    { {     321}, {   8} }, // MINUS          
    { {     257}, {   9} }, // ID             
    { {     271}, {  10} }, // IF             
    { {     274}, {  11} }, // WHILE          
    { {     275}, {  12} }, // FOR            
    { {     282}, {  13} }, // BREAK          
    { {     278}, {  14} }, // LET            
    { {       0}, { -36} },                   
};

SR__ s_6[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_7[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 33} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_9[] =
{
    { { REQ_DEF}, {  4} },          
    { {     263}, { 34} }, // LPAREN
    { {     267}, { 35} }, // LBRACE
    { {     265}, { 36} }, // LBRACK
    { {       0}, { -2} },          
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 37} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 38} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       257}, { 39} }, // ID
    { {         0}, {  0} },      
};

SR__ s_13[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_14[] =
{
    { { REQ_DEF}, {  12} },                   
    { {     336}, {  40} }, // decs           
    { {     337}, {  41} }, // decs_nonempty  
    { {     338}, {  42} }, // decs_nonempty_s
    { {     339}, {  43} }, // tydec          
    { {     344}, {  44} }, // vardec         
    { {     345}, {  45} }, // fundec         
    { {     340}, {  46} }, // tydec_one      
    { {     285}, {  47} }, // VAR            
    { {     346}, {  48} }, // fundec_one     
    { {     286}, {  49} }, // TYPE           
    { {     284}, {  50} }, // FUNCTION       
    { {       0}, { -50} },                   
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 51} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 52} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 53} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 54} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 55} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 56} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_21[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 57} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 58} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 59} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 60} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 61} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 62} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 63} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       257}, { 64} }, // ID
    { {         0}, {  0} },      
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 65} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       264}, { 66} }, // RPAREN
    { {         0}, {  0} },          
};

SR__ s_31[] =
{
    { { REQ_DEF}, {  15} },             
    { {     264}, {  67} }, // RPAREN   
    { {     320}, {  15} }, // PLUS     
    { {     321}, {  16} }, // MINUS    
    { {     322}, {  17} }, // TIMES    
    { {     323}, {  18} }, // DIVIDE   
    { {     314}, {  19} }, // EQ       
    { {     315}, {  20} }, // NEQ      
    { {     316}, {  21} }, // LT       
    { {     317}, {  22} }, // LE       
    { {     318}, {  23} }, // GT       
    { {     319}, {  24} }, // GE       
    { {     313}, {  25} }, // AND      
    { {     312}, {  26} }, // OR       
    { {     262}, {  68} }, // SEMICOLON
    { {       0}, { -37} },             
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_33[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_34[] =
{
    { { REQ_DEF}, {  16} },                   
    { {     331}, {  69} }, // actuals        
    { {     332}, {  70} }, // nonemptyactuals
    { {     327}, {  71} }, // exp            
    { {     326}, {   3} }, // lvalue         
    { {     283}, {   4} }, // NIL            
    { {     263}, {   5} }, // LPAREN         
    { {     259}, {   6} }, // INT            
    { {     258}, {   7} }, // STRING         
    { {     321}, {   8} }, // MINUS          
    { {     257}, {   9} }, // ID             
    { {     271}, {  10} }, // IF             
    { {     274}, {  11} }, // WHILE          
    { {     275}, {  12} }, // FOR            
    { {     282}, {  13} }, // BREAK          
    { {     278}, {  14} }, // LET            
    { {       0}, { -41} },                   
};

SR__ s_35[] =
{
    { { REQ_DEF}, {   5} },                
    { {     333}, {  72} }, // rec         
    { {     334}, {  73} }, // rec_nonempty
    { {     335}, {  74} }, // rec_one     
    { {     257}, {  75} }, // ID          
    { {       0}, { -45} },                
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 76} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       272}, { 77} }, // THEN  
    { {       320}, { 15} }, // PLUS  
    { {       321}, { 16} }, // MINUS 
    { {       322}, { 17} }, // TIMES 
    { {       323}, { 18} }, // DIVIDE
    { {       314}, { 19} }, // EQ    
    { {       315}, { 20} }, // NEQ   
    { {       316}, { 21} }, // LT    
    { {       317}, { 22} }, // LE    
    { {       318}, { 23} }, // GT    
    { {       319}, { 24} }, // GE    
    { {       313}, { 25} }, // AND   
    { {       312}, { 26} }, // OR    
    { {         0}, {  0} },          
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       277}, { 78} }, // DO    
    { {       320}, { 15} }, // PLUS  
    { {       321}, { 16} }, // MINUS 
    { {       322}, { 17} }, // TIMES 
    { {       323}, { 18} }, // DIVIDE
    { {       314}, { 19} }, // EQ    
    { {       315}, { 20} }, // NEQ   
    { {       316}, { 21} }, // LT    
    { {       317}, { 22} }, // LE    
    { {       318}, { 23} }, // GT    
    { {       319}, { 24} }, // GE    
    { {       313}, { 25} }, // AND   
    { {       312}, { 26} }, // OR    
    { {         0}, {  0} },          
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       311}, { 79} }, // ASSIGN
    { {         0}, {  0} },          
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       279}, { 80} }, // IN
    { {         0}, {  0} },      
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_42[] =
{
    { { REQ_DEF}, {  11} },                   
    { {     337}, {  81} }, // decs_nonempty  
    { {     338}, {  42} }, // decs_nonempty_s
    { {     339}, {  43} }, // tydec          
    { {     344}, {  44} }, // vardec         
    { {     345}, {  45} }, // fundec         
    { {     340}, {  46} }, // tydec_one      
    { {     285}, {  47} }, // VAR            
    { {     346}, {  48} }, // fundec_one     
    { {     286}, {  49} }, // TYPE           
    { {     284}, {  50} }, // FUNCTION       
    { {       0}, { -52} },                   
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_46[] =
{
    { { REQ_DEF}, {   4} },             
    { {     339}, {  82} }, // tydec    
    { {     340}, {  46} }, // tydec_one
    { {     286}, {  49} }, // TYPE     
    { {       0}, { -57} },             
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       257}, { 83} }, // ID
    { {         0}, {  0} },      
};

SR__ s_48[] =
{
    { { REQ_DEF}, {   4} },              
    { {     345}, {  84} }, // fundec    
    { {     346}, {  48} }, // fundec_one
    { {     284}, {  50} }, // FUNCTION  
    { {       0}, { -69} },              
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       257}, { 85} }, // ID
    { {         0}, {  0} },      
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       257}, { 86} }, // ID
    { {         0}, {  0} },      
};

SR__ s_51[] =
{
    { { REQ_DEF}, {   3} },          
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {       0}, { -14} },          
};

SR__ s_52[] =
{
    { { REQ_DEF}, {   3} },          
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {       0}, { -15} },          
};

SR__ s_53[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_54[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_55[] =
{
    { { REQ_DEF}, {   5} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {       0}, { -18} },          
};

SR__ s_56[] =
{
    { { REQ_DEF}, {   5} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {       0}, { -19} },          
};

SR__ s_57[] =
{
    { { REQ_DEF}, {   5} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {       0}, { -20} },          
};

SR__ s_58[] =
{
    { { REQ_DEF}, {   5} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {       0}, { -21} },          
};

SR__ s_59[] =
{
    { { REQ_DEF}, {   5} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {       0}, { -22} },          
};

SR__ s_60[] =
{
    { { REQ_DEF}, {   5} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {       0}, { -23} },          
};

SR__ s_61[] =
{
    { { REQ_DEF}, {  11} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {       0}, { -24} },          
};

SR__ s_62[] =
{
    { { REQ_DEF}, {  12} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {       0}, { -25} },          
};

SR__ s_63[] =
{
    { { REQ_DEF}, {  13} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -28} },          
};

SR__ s_64[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       266}, { 87} }, // RBRACK
    { {       320}, { 15} }, // PLUS  
    { {       321}, { 16} }, // MINUS 
    { {       322}, { 17} }, // TIMES 
    { {       323}, { 18} }, // DIVIDE
    { {       314}, { 19} }, // EQ    
    { {       315}, { 20} }, // NEQ   
    { {       316}, { 21} }, // LT    
    { {       317}, { 22} }, // LE    
    { {       318}, { 23} }, // GT    
    { {       319}, { 24} }, // GE    
    { {       313}, { 25} }, // AND   
    { {       312}, { 26} }, // OR    
    { {         0}, {  0} },          
};

SR__ s_66[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, { 15} },                   
    { {       327}, { 88} }, // exp            
    { {       330}, { 89} }, // sequencing_exps
    { {       326}, {  3} }, // lvalue         
    { {       283}, {  4} }, // NIL            
    { {       263}, {  5} }, // LPAREN         
    { {       259}, {  6} }, // INT            
    { {       258}, {  7} }, // STRING         
    { {       321}, {  8} }, // MINUS          
    { {       257}, {  9} }, // ID             
    { {       271}, { 10} }, // IF             
    { {       274}, { 11} }, // WHILE          
    { {       275}, { 12} }, // FOR            
    { {       282}, { 13} }, // BREAK          
    { {       278}, { 14} }, // LET            
    { {         0}, {  0} },                   
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       264}, { 90} }, // RPAREN
    { {         0}, {  0} },          
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_71[] =
{
    { { REQ_DEF}, {  14} },          
    { {     260}, {  91} }, // COMMA 
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -43} },          
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       268}, { 92} }, // RBRACE
    { {         0}, {  0} },          
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_74[] =
{
    { { REQ_DEF}, {   2} },         
    { {     260}, {  93} }, // COMMA
    { {       0}, { -47} },         
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       314}, { 94} }, // EQ
    { {         0}, {  0} },      
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       266}, { 95} }, // RBRACK
    { {       320}, { 15} }, // PLUS  
    { {       321}, { 16} }, // MINUS 
    { {       322}, { 17} }, // TIMES 
    { {       323}, { 18} }, // DIVIDE
    { {       314}, { 19} }, // EQ    
    { {       315}, { 20} }, // NEQ   
    { {       316}, { 21} }, // LT    
    { {       317}, { 22} }, // LE    
    { {       318}, { 23} }, // GT    
    { {       319}, { 24} }, // GE    
    { {       313}, { 25} }, // AND   
    { {       312}, { 26} }, // OR    
    { {         0}, {  0} },          
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 96} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 97} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       327}, { 98} }, // exp   
    { {       326}, {  3} }, // lvalue
    { {       283}, {  4} }, // NIL   
    { {       263}, {  5} }, // LPAREN
    { {       259}, {  6} }, // INT   
    { {       258}, {  7} }, // STRING
    { {       321}, {  8} }, // MINUS 
    { {       257}, {  9} }, // ID    
    { {       271}, { 10} }, // IF    
    { {       274}, { 11} }, // WHILE 
    { {       275}, { 12} }, // FOR   
    { {       282}, { 13} }, // BREAK 
    { {       278}, { 14} }, // LET   
    { {         0}, {  0} },          
};

SR__ s_80[] =
{
    { { REQ_DEF}, {  17} },                   
    { {     328}, {  99} }, // expseq         
    { {     329}, { 100} }, // sequencing     
    { {     327}, { 101} }, // exp            
    { {     330}, {  32} }, // sequencing_exps
    { {     326}, {   3} }, // lvalue         
    { {     283}, {   4} }, // NIL            
    { {     263}, {   5} }, // LPAREN         
    { {     259}, {   6} }, // INT            
    { {     258}, {   7} }, // STRING         
    { {     321}, {   8} }, // MINUS          
    { {     257}, {   9} }, // ID             
    { {     271}, {  10} }, // IF             
    { {     274}, {  11} }, // WHILE          
    { {     275}, {  12} }, // FOR            
    { {     282}, {  13} }, // BREAK          
    { {     278}, {  14} }, // LET            
    { {       0}, { -36} },                   
};

SR__ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       311}, { 102} }, // ASSIGN
    { {       261}, { 103} }, // COLON 
    { {         0}, {   0} },          
};

SR__ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       314}, { 104} }, // EQ
    { {         0}, {   0} },      
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       263}, { 105} }, // LPAREN
    { {         0}, {   0} },          
};

SR__ s_87[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_88[] =
{
    { { REQ_DEF}, {  14} },             
    { {     320}, {  15} }, // PLUS     
    { {     321}, {  16} }, // MINUS    
    { {     322}, {  17} }, // TIMES    
    { {     323}, {  18} }, // DIVIDE   
    { {     314}, {  19} }, // EQ       
    { {     315}, {  20} }, // NEQ      
    { {     316}, {  21} }, // LT       
    { {     317}, {  22} }, // LE       
    { {     318}, {  23} }, // GT       
    { {     319}, {  24} }, // GE       
    { {     313}, {  25} }, // AND      
    { {     312}, {  26} }, // OR       
    { {     262}, {  68} }, // SEMICOLON
    { {       0}, { -39} },             
};

SR__ s_89[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_90[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  15} },                   
    { {       332}, { 106} }, // nonemptyactuals
    { {       327}, {  71} }, // exp            
    { {       326}, {   3} }, // lvalue         
    { {       283}, {   4} }, // NIL            
    { {       263}, {   5} }, // LPAREN         
    { {       259}, {   6} }, // INT            
    { {       258}, {   7} }, // STRING         
    { {       321}, {   8} }, // MINUS          
    { {       257}, {   9} }, // ID             
    { {       271}, {  10} }, // IF             
    { {       274}, {  11} }, // WHILE          
    { {       275}, {  12} }, // FOR            
    { {       282}, {  13} }, // BREAK          
    { {       278}, {  14} }, // LET            
    { {         0}, {   0} },                   
};

SR__ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {   4} },                
    { {       334}, { 107} }, // rec_nonempty
    { {       335}, {  74} }, // rec_one     
    { {       257}, {  75} }, // ID          
    { {         0}, {   0} },                
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       327}, { 108} }, // exp   
    { {       326}, {   3} }, // lvalue
    { {       283}, {   4} }, // NIL   
    { {       263}, {   5} }, // LPAREN
    { {       259}, {   6} }, // INT   
    { {       258}, {   7} }, // STRING
    { {       321}, {   8} }, // MINUS 
    { {       257}, {   9} }, // ID    
    { {       271}, {  10} }, // IF    
    { {       274}, {  11} }, // WHILE 
    { {       275}, {  12} }, // FOR   
    { {       282}, {  13} }, // BREAK 
    { {       278}, {  14} }, // LET   
    { {         0}, {   0} },          
};

SR__ s_95[] =
{
    { { REQ_DEF}, {   2} },      
    { {     281}, { 109} }, // OF
    { {       0}, {  -5} },      
};

SR__ s_96[] =
{
    { { REQ_DEF}, {  14} },          
    { {     273}, { 110} }, // ELSE  
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -30} },          
};

SR__ s_97[] =
{
    { { REQ_DEF}, {  13} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -31} },          
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       276}, { 111} }, // TO    
    { {       320}, {  15} }, // PLUS  
    { {       321}, {  16} }, // MINUS 
    { {       322}, {  17} }, // TIMES 
    { {       323}, {  18} }, // DIVIDE
    { {       314}, {  19} }, // EQ    
    { {       315}, {  20} }, // NEQ   
    { {       316}, {  21} }, // LT    
    { {       317}, {  22} }, // LE    
    { {       318}, {  23} }, // GT    
    { {       319}, {  24} }, // GE    
    { {       313}, {  25} }, // AND   
    { {       312}, {  26} }, // OR    
    { {         0}, {   0} },          
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       280}, { 112} }, // END
    { {         0}, {   0} },       
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_101[] =
{
    { { REQ_DEF}, {  14} },             
    { {     320}, {  15} }, // PLUS     
    { {     321}, {  16} }, // MINUS    
    { {     322}, {  17} }, // TIMES    
    { {     323}, {  18} }, // DIVIDE   
    { {     314}, {  19} }, // EQ       
    { {     315}, {  20} }, // NEQ      
    { {     316}, {  21} }, // LT       
    { {     317}, {  22} }, // LE       
    { {     318}, {  23} }, // GT       
    { {     319}, {  24} }, // GE       
    { {     313}, {  25} }, // AND      
    { {     312}, {  26} }, // OR       
    { {     262}, {  68} }, // SEMICOLON
    { {       0}, { -37} },             
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       327}, { 113} }, // exp   
    { {       326}, {   3} }, // lvalue
    { {       283}, {   4} }, // NIL   
    { {       263}, {   5} }, // LPAREN
    { {       259}, {   6} }, // INT   
    { {       258}, {   7} }, // STRING
    { {       321}, {   8} }, // MINUS 
    { {       257}, {   9} }, // ID    
    { {       271}, {  10} }, // IF    
    { {       274}, {  11} }, // WHILE 
    { {       275}, {  12} }, // FOR   
    { {       282}, {  13} }, // BREAK 
    { {       278}, {  14} }, // LET   
    { {         0}, {   0} },          
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       257}, { 114} }, // ID
    { {         0}, {   0} },      
};

SR__ s_104[] =
{
    { { REQ_TOKEN}, {   5} },          
    { {       341}, { 115} }, // ty    
    { {       257}, { 116} }, // ID    
    { {       267}, { 117} }, // LBRACE
    { {       270}, { 118} }, // ARRAY 
    { {         0}, {   0} },          
};

SR__ s_105[] =
{
    { { REQ_DEF}, {   4} },                     
    { {     342}, { 119} }, // tyfields         
    { {     343}, { 120} }, // tyfields_nonempty
    { {     257}, { 121} }, // ID               
    { {       0}, { -63} },                     
};

SR__ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_107[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_108[] =
{
    { { REQ_DEF}, {  13} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -49} },          
};

SR__ s_109[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       327}, { 122} }, // exp   
    { {       326}, {   3} }, // lvalue
    { {       283}, {   4} }, // NIL   
    { {       263}, {   5} }, // LPAREN
    { {       259}, {   6} }, // INT   
    { {       258}, {   7} }, // STRING
    { {       321}, {   8} }, // MINUS 
    { {       257}, {   9} }, // ID    
    { {       271}, {  10} }, // IF    
    { {       274}, {  11} }, // WHILE 
    { {       275}, {  12} }, // FOR   
    { {       282}, {  13} }, // BREAK 
    { {       278}, {  14} }, // LET   
    { {         0}, {   0} },          
};

SR__ s_110[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       327}, { 123} }, // exp   
    { {       326}, {   3} }, // lvalue
    { {       283}, {   4} }, // NIL   
    { {       263}, {   5} }, // LPAREN
    { {       259}, {   6} }, // INT   
    { {       258}, {   7} }, // STRING
    { {       321}, {   8} }, // MINUS 
    { {       257}, {   9} }, // ID    
    { {       271}, {  10} }, // IF    
    { {       274}, {  11} }, // WHILE 
    { {       275}, {  12} }, // FOR   
    { {       282}, {  13} }, // BREAK 
    { {       278}, {  14} }, // LET   
    { {         0}, {   0} },          
};

SR__ s_111[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       327}, { 124} }, // exp   
    { {       326}, {   3} }, // lvalue
    { {       283}, {   4} }, // NIL   
    { {       263}, {   5} }, // LPAREN
    { {       259}, {   6} }, // INT   
    { {       258}, {   7} }, // STRING
    { {       321}, {   8} }, // MINUS 
    { {       257}, {   9} }, // ID    
    { {       271}, {  10} }, // IF    
    { {       274}, {  11} }, // WHILE 
    { {       275}, {  12} }, // FOR   
    { {       282}, {  13} }, // BREAK 
    { {       278}, {  14} }, // LET   
    { {         0}, {   0} },          
};

SR__ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_113[] =
{
    { { REQ_DEF}, {  13} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -67} },          
};

SR__ s_114[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       311}, { 125} }, // ASSIGN
    { {         0}, {   0} },          
};

SR__ s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_117[] =
{
    { { REQ_DEF}, {   4} },                     
    { {     342}, { 126} }, // tyfields         
    { {     343}, { 120} }, // tyfields_nonempty
    { {     257}, { 121} }, // ID               
    { {       0}, { -63} },                     
};

SR__ s_118[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       281}, { 127} }, // OF
    { {         0}, {   0} },      
};

SR__ s_119[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       264}, { 128} }, // RPAREN
    { {         0}, {   0} },          
};

SR__ s_120[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       261}, { 129} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_122[] =
{
    { { REQ_DEF}, {  13} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -27} },          
};

SR__ s_123[] =
{
    { { REQ_DEF}, {  13} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -29} },          
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       277}, { 130} }, // DO    
    { {       320}, {  15} }, // PLUS  
    { {       321}, {  16} }, // MINUS 
    { {       322}, {  17} }, // TIMES 
    { {       323}, {  18} }, // DIVIDE
    { {       314}, {  19} }, // EQ    
    { {       315}, {  20} }, // NEQ   
    { {       316}, {  21} }, // LT    
    { {       317}, {  22} }, // LE    
    { {       318}, {  23} }, // GT    
    { {       319}, {  24} }, // GE    
    { {       313}, {  25} }, // AND   
    { {       312}, {  26} }, // OR    
    { {         0}, {   0} },          
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       327}, { 131} }, // exp   
    { {       326}, {   3} }, // lvalue
    { {       283}, {   4} }, // NIL   
    { {       263}, {   5} }, // LPAREN
    { {       259}, {   6} }, // INT   
    { {       258}, {   7} }, // STRING
    { {       321}, {   8} }, // MINUS 
    { {       257}, {   9} }, // ID    
    { {       271}, {  10} }, // IF    
    { {       274}, {  11} }, // WHILE 
    { {       275}, {  12} }, // FOR   
    { {       282}, {  13} }, // BREAK 
    { {       278}, {  14} }, // LET   
    { {         0}, {   0} },          
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       268}, { 132} }, // RBRACE
    { {         0}, {   0} },          
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       257}, { 133} }, // ID
    { {         0}, {   0} },      
};

SR__ s_128[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {       314}, { 134} }, // EQ   
    { {       261}, { 135} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_129[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       257}, { 136} }, // ID
    { {         0}, {   0} },      
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       327}, { 137} }, // exp   
    { {       326}, {   3} }, // lvalue
    { {       283}, {   4} }, // NIL   
    { {       263}, {   5} }, // LPAREN
    { {       259}, {   6} }, // INT   
    { {       258}, {   7} }, // STRING
    { {       321}, {   8} }, // MINUS 
    { {       257}, {   9} }, // ID    
    { {       271}, {  10} }, // IF    
    { {       274}, {  11} }, // WHILE 
    { {       275}, {  12} }, // FOR   
    { {       282}, {  13} }, // BREAK 
    { {       278}, {  14} }, // LET   
    { {         0}, {   0} },          
};

SR__ s_131[] =
{
    { { REQ_DEF}, {  13} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -68} },          
};

SR__ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_133[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_134[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       327}, { 138} }, // exp   
    { {       326}, {   3} }, // lvalue
    { {       283}, {   4} }, // NIL   
    { {       263}, {   5} }, // LPAREN
    { {       259}, {   6} }, // INT   
    { {       258}, {   7} }, // STRING
    { {       321}, {   8} }, // MINUS 
    { {       257}, {   9} }, // ID    
    { {       271}, {  10} }, // IF    
    { {       274}, {  11} }, // WHILE 
    { {       275}, {  12} }, // FOR   
    { {       282}, {  13} }, // BREAK 
    { {       278}, {  14} }, // LET   
    { {         0}, {   0} },          
};

SR__ s_135[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       257}, { 139} }, // ID
    { {         0}, {   0} },      
};

SR__ s_136[] =
{
    { { REQ_DEF}, {   2} },         
    { {     260}, { 140} }, // COMMA
    { {       0}, { -65} },         
};

SR__ s_137[] =
{
    { { REQ_DEF}, {  13} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -32} },          
};

SR__ s_138[] =
{
    { { REQ_DEF}, {  13} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -71} },          
};

SR__ s_139[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       314}, { 141} }, // EQ
    { {         0}, {   0} },      
};

SR__ s_140[] =
{
    { { REQ_TOKEN}, {   3} },                     
    { {       343}, { 142} }, // tyfields_nonempty
    { {       257}, { 121} }, // ID               
    { {         0}, {   0} },                     
};

SR__ s_141[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       327}, { 143} }, // exp   
    { {       326}, {   3} }, // lvalue
    { {       283}, {   4} }, // NIL   
    { {       263}, {   5} }, // LPAREN
    { {       259}, {   6} }, // INT   
    { {       258}, {   7} }, // STRING
    { {       321}, {   8} }, // MINUS 
    { {       257}, {   9} }, // ID    
    { {       271}, {  10} }, // IF    
    { {       274}, {  11} }, // WHILE 
    { {       275}, {  12} }, // FOR   
    { {       282}, {  13} }, // BREAK 
    { {       278}, {  14} }, // LET   
    { {         0}, {   0} },          
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_143[] =
{
    { { REQ_DEF}, {  13} },          
    { {     320}, {  15} }, // PLUS  
    { {     321}, {  16} }, // MINUS 
    { {     322}, {  17} }, // TIMES 
    { {     323}, {  18} }, // DIVIDE
    { {     314}, {  19} }, // EQ    
    { {     315}, {  20} }, // NEQ   
    { {     316}, {  21} }, // LT    
    { {     317}, {  22} }, // LE    
    { {     318}, {  23} }, // GT    
    { {     319}, {  24} }, // GE    
    { {     313}, {  25} }, // AND   
    { {     312}, {  26} }, // OR    
    { {       0}, { -72} },          
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,
};

} // anonymous namespace ends




// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved__::UNDETERMINED__),
    // $insert baseclasscode
    d_requiredTokens__(0)
{
}

// base/clearin
void ParserBase::clearin__()
{
    d_nErrors__ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved__::UNDETERMINED__;
    d_next = TokenPair{ Reserved__::UNDETERMINED__, STYPE__{} };
    d_recovery = false;
    d_acceptedTokens__ = d_requiredTokens__;
    d_val__ = STYPE__{};

    push__(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases__ = false;
    d_debug__ = mode;
}

void ParserBase::setDebug(DebugMode__ mode)
{
    d_actionCases__ = mode & ACTIONCASES;
    d_debug__ =       mode & ON;
}

// base/lex
void ParserBase::lex__(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved__::EOF__;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup__() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR__ const *sr = s_state[d_state];
    SR__ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParserBase::popToken__()
{
    d_token = d_next.first;
    d_val__ = std::move(d_next.second);

    d_next.first = Reserved__::UNDETERMINED__;
}

// base/push
void ParserBase::push__(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize__() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION__;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val__) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken__(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val__) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken__()
{
    if (d_token != Reserved__::UNDETERMINED__)
        pushToken__(d_token);
}

// base/reduce
void ParserBase::reduce__(int rule)
{
    PI__ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop__(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift__(int action)
{
    push__(action);
    popToken__();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens__ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery__()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken__(Reserved__::errTok__);      // specify errTok__ as next token
    push__(lookup__());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top__() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery__()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle__ for details.

    startRecovery__();
}

// derived/executeaction
void Parser::executeAction__(int production)
try
{
    if (token__() != Reserved__::UNDETERMINED__)
        pushToken__(token__());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 69 "tiger.y"
        {absyn_tree_ = std::make_unique<absyn::AbsynTree>(vs__(0).exp);}
        break;

        case 2:
#line 71 "tiger.y"
        {d_val__.var = new absyn::SimpleVar(scanner_.GetTokPos(), vs__(0).sym);}
        break;

        case 3:
#line 72 "tiger.y"
        {d_val__.var = new absyn::FieldVar(scanner_.GetTokPos(),vs__(-2).var,vs__(0).sym);}
        break;

        case 4:
#line 73 "tiger.y"
        {d_val__.var = new absyn::SubscriptVar(scanner_.GetTokPos(), vs__(-3).var, vs__(-1).exp);}
        break;

        case 5:
#line 74 "tiger.y"
        {d_val__.var = new absyn::SubscriptVar(scanner_.GetTokPos(), new absyn::SimpleVar(scanner_.GetTokPos(), vs__(-3).sym), vs__(-1).exp);}
        break;

        case 6:
#line 78 "tiger.y"
        {d_val__.exp = new absyn::VarExp(scanner_.GetTokPos(), vs__(0).var);}
        break;

        case 7:
#line 79 "tiger.y"
        {d_val__.exp = new absyn::NilExp(scanner_.GetTokPos());}
        break;

        case 8:
#line 80 "tiger.y"
        {
         if (!(vs__(-1).explist)->GetList().empty())
         d_val__.exp = new absyn::SeqExp(scanner_.GetTokPos(), vs__(-1).explist);
         else{
         d_val__.exp =new absyn::VoidExp(scanner_.GetTokPos());
         }
         }
        break;

        case 9:
#line 87 "tiger.y"
        {d_val__.exp = vs__(-1).exp;}
        break;

        case 10:
#line 88 "tiger.y"
        {d_val__.exp = new absyn::IntExp(scanner_.GetTokPos(), vs__(0).ival);}
        break;

        case 11:
#line 89 "tiger.y"
        {d_val__.exp = new absyn::StringExp(scanner_.GetTokPos(), vs__(0).sval);}
        break;

        case 12:
#line 90 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(),absyn::MINUS_OP, new absyn::IntExp(scanner_.GetTokPos(), 0), vs__(0).exp);}
        break;

        case 13:
#line 91 "tiger.y"
        {d_val__.exp = new absyn::CallExp(scanner_.GetTokPos(),vs__(-3).sym, vs__(-1).explist);}
        break;

        case 14:
#line 92 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::PLUS_OP, vs__(-2).exp, vs__(0).exp);}
        break;

        case 15:
#line 93 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::MINUS_OP, vs__(-2).exp, vs__(0).exp);}
        break;

        case 16:
#line 94 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::TIMES_OP, vs__(-2).exp, vs__(0).exp);}
        break;

        case 17:
#line 95 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::DIVIDE_OP, vs__(-2).exp, vs__(0).exp);}
        break;

        case 18:
#line 96 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::EQ_OP, vs__(-2).exp, vs__(0).exp);}
        break;

        case 19:
#line 97 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::NEQ_OP, vs__(-2).exp, vs__(0).exp);}
        break;

        case 20:
#line 98 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::LT_OP, vs__(-2).exp, vs__(0).exp);}
        break;

        case 21:
#line 99 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::LE_OP, vs__(-2).exp, vs__(0).exp);}
        break;

        case 22:
#line 100 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::GT_OP, vs__(-2).exp, vs__(0).exp);}
        break;

        case 23:
#line 101 "tiger.y"
        {d_val__.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::GE_OP, vs__(-2).exp, vs__(0).exp);}
        break;

        case 24:
#line 102 "tiger.y"
        {d_val__.exp = new absyn::IfExp(scanner_.GetTokPos(), vs__(-2).exp, vs__(0).exp, new absyn::IntExp(scanner_.GetTokPos(), 0));}
        break;

        case 25:
#line 103 "tiger.y"
        {d_val__.exp = new absyn::IfExp(scanner_.GetTokPos(), vs__(-2).exp, new absyn::IntExp(scanner_.GetTokPos(), 1), vs__(0).exp);}
        break;

        case 26:
#line 104 "tiger.y"
        {d_val__.exp = new absyn::RecordExp(scanner_.GetTokPos(), vs__(-3).sym, vs__(-1).efieldlist);}
        break;

        case 27:
#line 105 "tiger.y"
        {d_val__.exp = new absyn::ArrayExp(scanner_.GetTokPos(), vs__(-5).sym, vs__(-3).exp, vs__(0).exp);}
        break;

        case 28:
#line 106 "tiger.y"
        {d_val__.exp = new absyn::AssignExp(scanner_.GetTokPos(), vs__(-2).var, vs__(0).exp);}
        break;

        case 29:
#line 107 "tiger.y"
        {d_val__.exp = new absyn::IfExp(scanner_.GetTokPos(), vs__(-4).exp, vs__(-2).exp, vs__(0).exp);}
        break;

        case 30:
#line 108 "tiger.y"
        {d_val__.exp = new absyn::IfExp(scanner_.GetTokPos(), vs__(-2).exp, vs__(0).exp, NULL);}
        break;

        case 31:
#line 109 "tiger.y"
        {d_val__.exp = new absyn::WhileExp(scanner_.GetTokPos(), vs__(-2).exp, vs__(0).exp);}
        break;

        case 32:
#line 110 "tiger.y"
        {d_val__.exp = new absyn::ForExp(scanner_.GetTokPos(), vs__(-6).sym, vs__(-4).exp, vs__(-2).exp, vs__(0).exp);}
        break;

        case 33:
#line 111 "tiger.y"
        {d_val__.exp = new absyn::BreakExp(scanner_.GetTokPos());}
        break;

        case 34:
#line 112 "tiger.y"
        {d_val__.exp = new absyn::LetExp(scanner_.GetTokPos(), vs__(-3).declist, vs__(-1).exp);}
        break;

        case 35:
#line 115 "tiger.y"
        {d_val__.exp = new absyn::SeqExp(scanner_.GetTokPos(), vs__(0).explist);}
        break;

        case 36:
#line 118 "tiger.y"
        {d_val__.explist = new absyn::ExpList();}
        break;

        case 37:
#line 119 "tiger.y"
        {d_val__.explist = new absyn::ExpList(vs__(0).exp);}
        break;

        case 38:
#line 120 "tiger.y"
        {d_val__.explist = vs__(0).explist;}
        break;

        case 39:
#line 123 "tiger.y"
        {absyn::ExpList * tmp=new absyn::ExpList(vs__(0).exp);d_val__.explist =tmp->Prepend(vs__(-2).exp);}
        break;

        case 40:
#line 124 "tiger.y"
        {d_val__.explist =(vs__(0).explist)->Prepend(vs__(-2).exp);}
        break;

        case 41:
#line 127 "tiger.y"
        {d_val__.explist = new absyn::ExpList();}
        break;

        case 42:
#line 128 "tiger.y"
        {d_val__.explist = vs__(0).explist;}
        break;

        case 43:
#line 131 "tiger.y"
        {d_val__.explist = new absyn::ExpList(vs__(0).exp);}
        break;

        case 44:
#line 132 "tiger.y"
        {d_val__.explist =(vs__(0).explist)->Prepend(vs__(-2).exp);}
        break;

        case 45:
#line 135 "tiger.y"
        {d_val__.efieldlist = new absyn::EFieldList();}
        break;

        case 46:
#line 136 "tiger.y"
        {d_val__.efieldlist = vs__(0).efieldlist;}
        break;

        case 47:
#line 139 "tiger.y"
        {d_val__.efieldlist = new absyn::EFieldList(vs__(0).efield);}
        break;

        case 48:
#line 140 "tiger.y"
        {d_val__.efieldlist =(vs__(0).efieldlist)->Prepend(vs__(-2).efield);}
        break;

        case 49:
#line 143 "tiger.y"
        {d_val__.efield = new absyn::EField(vs__(-2).sym, vs__(0).exp);}
        break;

        case 50:
#line 146 "tiger.y"
        {d_val__.declist = new absyn::DecList();}
        break;

        case 51:
#line 147 "tiger.y"
        {d_val__.declist = vs__(0).declist;}
        break;

        case 52:
#line 150 "tiger.y"
        {d_val__.declist = new absyn::DecList(vs__(0).dec);}
        break;

        case 53:
#line 151 "tiger.y"
        {d_val__.declist =(vs__(0).declist)->Prepend(vs__(-1).dec);}
        break;

        case 54:
#line 154 "tiger.y"
        {d_val__.dec = new absyn::TypeDec(scanner_.GetTokPos(), vs__(0).tydeclist);}
        break;

        case 55:
#line 155 "tiger.y"
        {d_val__.dec = vs__(0).dec;}
        break;

        case 56:
#line 156 "tiger.y"
        {d_val__.dec = new absyn::FunctionDec(scanner_.GetTokPos(), vs__(0).fundeclist);}
        break;

        case 57:
#line 159 "tiger.y"
        {d_val__.tydeclist = new absyn::NameAndTyList(vs__(0).tydec);}
        break;

        case 58:
#line 160 "tiger.y"
        {d_val__.tydeclist =(vs__(0).tydeclist)->Prepend(vs__(-1).tydec);}
        break;

        case 59:
#line 163 "tiger.y"
        {d_val__.tydec = new absyn::NameAndTy(vs__(-2).sym, vs__(0).ty);}
        break;

        case 60:
#line 166 "tiger.y"
        {d_val__.ty = new absyn::NameTy(scanner_.GetTokPos(), vs__(0).sym);}
        break;

        case 61:
#line 167 "tiger.y"
        {d_val__.ty = new absyn::RecordTy(scanner_.GetTokPos(), vs__(-1).fieldlist);}
        break;

        case 62:
#line 168 "tiger.y"
        {d_val__.ty = new absyn::ArrayTy(scanner_.GetTokPos(), vs__(0).sym);}
        break;

        case 63:
#line 171 "tiger.y"
        {d_val__.fieldlist = new absyn::FieldList();}
        break;

        case 64:
#line 172 "tiger.y"
        {d_val__.fieldlist = vs__(0).fieldlist;}
        break;

        case 65:
#line 175 "tiger.y"
        {d_val__.fieldlist = new absyn::FieldList(new absyn::Field(scanner_.GetTokPos(), vs__(-2).sym, vs__(0).sym));}
        break;

        case 66:
#line 176 "tiger.y"
        {d_val__.fieldlist =(vs__(0).fieldlist)->Prepend(new absyn::Field(scanner_.GetTokPos(), vs__(-4).sym, vs__(-2).sym));}
        break;

        case 67:
#line 179 "tiger.y"
        {d_val__.dec = new absyn::VarDec(scanner_.GetTokPos(),vs__(-2).sym,NULL,vs__(0).exp);}
        break;

        case 68:
#line 180 "tiger.y"
        {d_val__.dec = new absyn::VarDec(scanner_.GetTokPos(),vs__(-4).sym,vs__(-2).sym,vs__(0).exp);}
        break;

        case 69:
#line 183 "tiger.y"
        {d_val__.fundeclist = new absyn::FunDecList(vs__(0).fundec);}
        break;

        case 70:
#line 184 "tiger.y"
        {d_val__.fundeclist =(vs__(0).fundeclist)->Prepend(vs__(-1).fundec);}
        break;

        case 71:
#line 187 "tiger.y"
        {d_val__.fundec = new absyn::FunDec(scanner_.GetTokPos(), vs__(-5).sym, vs__(-3).fieldlist, NULL, vs__(0).exp);}
        break;

        case 72:
#line 188 "tiger.y"
        {d_val__.fundec = new absyn::FunDec(scanner_.GetTokPos(), vs__(-7).sym, vs__(-5).fieldlist, vs__(-2).sym, vs__(0).exp);}
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle__()
try
{
    if (s_state[state__()]->d_type & REQ_TOKEN)
        nextToken__();              // obtain next token


    int action = lookup__();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift__(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery__())
            redoToken__();
        else
            executeAction__(-action);
                                            // next token is the rule's LHS
        reduce__(-action); 
        return;
    }

    if (recovery__())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery__)
{
    if (not recovery__())
        errorRecovery__();
    else
    {
        if (token__() == Reserved__::EOF__)
            ABORT();
        popToken__();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken__()
{ 
    // If d_token is Reserved__::UNDETERMINED__ then if savedToken__() is
    // Reserved__::UNDETERMINED__ another token is obtained from lex(). Then
    // savedToken__() is assigned to d_token.

                                    // no need for a token: got one already
    if (token__() != Reserved__::UNDETERMINED__) 
    {
        return;                             
    }

    if (savedToken__() != Reserved__::UNDETERMINED__)
    {
        popToken__();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;       // accept another token (see
                                    // errorRecover())
        lex__(lex());
        print__();
    }
    print();
}

// derived/print
void Parser::print__()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin__.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin__();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle__();
    }
}
catch (Return__ retValue)
{
    return retValue or d_nErrors__;
}


// derived/tail


